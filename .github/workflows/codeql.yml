name: CodeQL Security Analysis

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '30 3 * * 2' # Weekly on Tuesday at 3:30 AM UTC

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  security-scan:
    name: Additional Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Scan for secrets
      run: |
        echo "üîç Scanning for potential secrets..."
        
        # Check for common secret patterns
        SECRETS_FOUND=false
        
        # Real API keys (not in comments or documentation)
        if grep -r -E "^[^#/\*]*[\"']?api[_-]?key[\"']?\s*[:=]\s*[\"'][a-zA-Z0-9]{32,}[\"']" src/ --include="*.ts" --include="*.js" --exclude-dir=node_modules || false; then
          echo "‚ùå Potential API keys found"
          SECRETS_FOUND=true
        fi
        
        # Real private keys (actual PEM content)
        if grep -r "^-----BEGIN.*PRIVATE.*KEY-----" src/ --exclude-dir=node_modules || false; then
          echo "‚ùå Private keys found"
          SECRETS_FOUND=true
        fi
        
        # Real tokens (not in comments or documentation)
        if grep -r -E "^[^#/\*]*[\"']?(access_token|bearer_token)[\"']?\s*[:=]\s*[\"'][a-zA-Z0-9]{32,}[\"']" src/ --include="*.ts" --include="*.js" --exclude-dir=node_modules || false; then
          echo "‚ùå Potential tokens found"
          SECRETS_FOUND=true
        fi
        
        # Hardcoded passwords (not variable names or comments)
        if grep -r -E "^[^#/\*]*[\"']?password[\"']?\s*[:=]\s*[\"'][^\"']{8,}[\"']" src/ --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude="*.test.*" || false; then
          echo "‚ùå Potential hardcoded passwords found"
          SECRETS_FOUND=true
        fi
        
        if [ "$SECRETS_FOUND" = true ]; then
          echo "‚ùå Security scan failed - potential secrets detected"
          exit 1
        else
          echo "‚úÖ No secrets detected"
        fi
        
    - name: Check file permissions
      run: |
        echo "üîí Checking file permissions..."
        
        # Check for executable files that shouldn't be
        find src/ -name "*.js" -o -name "*.ts" -o -name "*.json" | while read file; do
          if [ -x "$file" ] && [ "$file" != "src/index.ts" ]; then
            echo "‚ùå Unexpected executable file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ File permissions look correct"
        
    - name: Validate package.json security
      run: |
        echo "üì¶ Validating package.json security..."
        
        # Check for suspicious scripts (but allow common npm patterns)
        if grep -E "(curl|wget|eval|\bsh\s|bash\s)" package.json | grep -v -E "(npm\s+run|&&|prepublishOnly|prepare)"; then
          echo "‚ùå Suspicious scripts detected in package.json"
          exit 1
        fi
        
        # Check for git hooks
        if grep -E "husky|pre-commit|post-install" package.json; then
          echo "‚ö†Ô∏è Git hooks detected - ensure they are secure"
        fi
        
        echo "‚úÖ Package.json security validation passed"