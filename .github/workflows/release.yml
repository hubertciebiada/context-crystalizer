name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Update package.json version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        TARGET_VERSION="${{ steps.version.outputs.VERSION }}"
        if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
          npm version $TARGET_VERSION --no-git-tag-version
        else
          echo "Version already set to $TARGET_VERSION, skipping update"
        fi
        
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          sed -n '/## \['"${{ steps.version.outputs.VERSION }}"'\]/,/## \[/p' CHANGELOG.md | sed '$ d' > release_notes.md
        else
          echo "Release ${{ steps.version.outputs.VERSION }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Features" >> release_notes.md
          echo "- Complete AI Context Engineering platform" >> release_notes.md
          echo "- 10 specialized MCP tools for AI agents" >> release_notes.md
          echo "- Token-efficient context generation (5:1 compression)" >> release_notes.md
          echo "- Semantic search and quality validation" >> release_notes.md
        fi
        
    - name: Create package tarball
      run: npm pack
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: Context Crystallizer v${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        files: |
          context-crystallizer-${{ steps.version.outputs.VERSION }}.tgz
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create summary
      run: |
        echo "## ðŸš€ Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** context-crystallizer" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** https://www.npmjs.com/package/context-crystallizer" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "npm install -g context-crystallizer@${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY